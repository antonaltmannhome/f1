library(shiny)
runExample('shinydemo')
runExample('02_text')
setwd("C:/research")
runExample('02_text')
runExample('shinydemo')
runApp
runApp('shinydemo')
q()
source('c:/research/f1/f1-startup.r')
newVersionIsLive = TRUE
source(paste0(UPDATECODEPATH, 'fetch-data.r'))
source(paste0(UPDATECODEPATH, 'augment-raw-data.r'))
source(paste0(UPDATECODEPATH, 'transfer-data-to-database.r'))
myYear = 2019
FetchSeasonInfo(myYear)
AugmentRawData(myYear)
TransferDataToDatabase(myYear)
source('c:/research/f1/f1-startup.r')
f1qualifying::RunQualifyingOutlier()
f1qualifying::RunQualifyingModel()
# also, do we need driverteam in the function, how about use driverTeamYr which has already been made
# worth checking the optimisation is ok, it looked a bit flat when run on very small sample of data
SmoothAndStretch('qual')
f1outlier::GetOutlier0()
modelchoice = 4
f1validity::UpdateValidity(modelchoice)
f1laptimelm::ProcessLapTimeModel(modelchoice)
CheckSensibleModel(4)
f1laptimelm::GetLapTimeLMIntercept(modelchoice)
### all checks are agreeing to desired level up to here...
SmoothAndStretch(modelchoice)
f1gaptrafficpitstop::ProcessInlapOutlapDelta()
f1gaptrafficpitstop::GetPostDeltaOvertaking()
f1carproblem::ProcessCarProblem()
modelchoice = 30
f1validity::UpdateValidity(modelchoice)
f1laptimelm::ProcessLapTimeModel(modelchoice)
f1laptimelm::GetLapTimeLMIntercept(modelchoice)
SmoothAndStretch(modelchoice)
f1messystint:::ProcessInterruptedStint()
f1messystint:::ProcessGuessedPitStop()
f1messystint:::ProcessAlternativeStrategy()
f1messystint:::ProcessIntendedStopLap()
f1blockedovertakingmodel:::ProcessPossibleOvertaking()
f1blockedovertakingmodel:::ProcessBlockedOvertakingModel()
f1simulation:::ProcessInRunningWeightModel()
f1simulation:::ProcessSimulation()
f1admin::UpdateDatabase()
f1plot:::RacePaceAndNumObPlot('2019brazil')
f1plot:::DriverRacePlot('2019brazil','dricciardo','nhulkenberg')
f1plot:::DriverRacePlot('2019brazil','dkvyat','nhulkenberg')
source('f1-startup.r')
SetUpModel()
f1plot:::RacePaceAndNumObPlot('2019brazil')
source('f1-startup.r')
SetUpModel()
names(lbl)
myDriv1 = 'nhulkneberg'
myDriv2 = 'dricciardo'
myYear = 2019
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
horizLbl = myLbl %>%
select(race, lap, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl = myLbl %>%
select(race, lap, driver, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl %>% head
myDriv1 = 'nhulkenberg'
myDriv2 = 'dricciardo'
myYear = 2019
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
horizLbl = myLbl %>%
select(race, lap, driver, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl %>% head
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, colToSpread)
dum = myLbl %>%
select(race, lap, driver, colToSpread)
head(dum)
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, get(colToSpread))
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
## horrible names of course, so rename
badName = expand.grid(c(myDriv1, myDriv2), colToSpread)
badName
apply(badName, 1, paste, collapse = '_')
names(horizLbl)
## horrible names of course, so rename
badName = apply(expand.grid('driver', c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_')
badName
badName %in% names(horizLbl)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
badName %in% names(horizLbl)
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x)), collapse = '_')
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = '_'))
goodName
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
cbind(badName, goodName)
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
head(horizLbl)
rddf %>% filter(year == 2019 & team == 'renault') %>% select(race, driver, finpos) %>% spread(key = driver, value = finpos)
rddf %>% filter(year == 2019 & team == 'renault') %>% select(race, driver, officialFinishingPosition) %>% spread(key = driver, value = officialFinishingPosition)
horizLbl %>% filter(race == '2019china')
myLbl$fuelTyreEffect = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl$fuelTyreEffect = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
names(myLbl)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
fuck = horizLbl = myLbl %>%
select(race, lap, driver, colToSpread)
head(fuck)
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
names(myLbl)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
myLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2))
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2))
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n())
# now filter out laps where either driver had carproblem
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n())
with(lbl, sum(wasBlocked & !inTraffic))
with(lbl, sum(wasBlocked & !inTraffic, na.rm = T))
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# then, filter out traffic laps
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n())
# and what if we take away fuel and tyre effect?
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect - (sec2 - fuelTyreEffect)),
numLap = n())
# and what if we take away fuel and tyre effect?
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n())
rm(horizLbl, myLbl)
CheckOne = function(myYear, myDriv1, myDriv2) {
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
message('All laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# now filter out laps where either driver had carproblem
message('Exclude car problem laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude traffic laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# and what if we take away fuel and tyre effect?
message('Adjust for fuel and tyres:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n()))
}
CheckOne(2019, 'lhamilton', 'vbottas')
CheckOne(2019, 'svettel', 'cleclerc')
CheckOne(2019, 'sperez', 'lstroll')
CheckOne(2019, 'mverstappen', 'pgasly')
CheckOne(2019, 'kraikkonen', 'agiovinazzi')
CheckOne(2019, 'rgrosjean', 'kmagnussen')
CheckOne(2019, 'csainz', 'lnorris')
CheckOne(2019, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'grussell', 'rkubica')
CheckOne(2014, 'dricciardo', 'svettel')
CheckOne(2014, 'dricciardo', 'mverstappen')
CheckOne(2017, 'dricciardo', 'mverstappen')
CheckOne(2018, 'dricciardo', 'mverstappen')
names(lbl)
CheckOne = function(myYear, myDriv1, myDriv2) {
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
message('All laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# now filter out laps where either driver had carproblem
message('Exclude car problem laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude traffic laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude dead rubber laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# and what if we take away fuel and tyre effect?
message('Adjust for fuel and tyres:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n()))
}
CheckOne(2018, 'dricciardo', 'mverstappen')
CheckOne(2018, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'lhamilton', 'vbottas')
CheckOne(2016, 'lhamilton', 'nrosberg')
CheckOne(2015, 'lhamilton', 'nrosberg')
CheckOne(2014, 'lhamilton', 'nrosberg')
CheckOne(2013, 'lhamilton', 'nrosberg')
CheckOne(2012, 'lhamilton', 'jbutton')
CheckOne(2011, 'lhamilton', 'jbutton')
CheckOne(2011, 'sperez', 'kkobayashi')
CheckOne(2012, 'sperez', 'kkobayashi')
source('f1-startup.r')
SetUpModel()
dum = f1smoothing::GetSmooth('qr','q','bw',TRUE,30)
dum$smoothDF %>% filter(race == '2019abudhabi') %>% arrange(smoothDCoef)
dum$smoothDF %>% filter(race == '2019brazil') %>% arrange(smoothDCoef)
#rddf %>% filter(year == 2019 & driver=='kmagnussen')) %>% select(race, startin)
names(rddf)
rddf %>% filter(year == 2019 & driver=='kmagnussen')) %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='kmagnussen') %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='sperez') %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='agiovinazzi') %>% select(race, startingGrid)
qdf[1,]
nrow(qdf)
nrow(rddf)
dim(qsdf)
dim(qualifyingSessionDF)
