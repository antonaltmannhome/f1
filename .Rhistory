allCombo = ReadF1Data(smoothModelFile, 'smoothing')
allCombo$fileIsDone = !is.na(allCombo$sqDiff)
}
## now filter down to the ones user has asked for (via filterList)
smoothParamName = f1smoothing:::GetSmoothParamName()
smoothModelChoiceComboName = c(smoothParamName, 'modelChoice')
allCombo = indicate_overlapping_combination(
allCombo,
filterCombo,
smoothModelChoiceComboName,
'isInFilter')
modelToRun = with(allCombo, which(isInFilter & !fileIsDone))
modelToRun
j=1
smoothOutput = f1smoothing:::GetSmooth(qrToFit = allCombo$qrToFit[j],
qrToPredict = allCombo$qrToPredict[j],
modelChoice = allCombo$modelChoice[j],
useStretch = allCombo$useStretch[j],
fwbw = allCombo$fwbw[j])
allCombo[j,]
debug(f1smoothing:::GetSmooth)
smoothOutput = f1smoothing:::GetSmooth(qrToFit = allCombo$qrToFit[j],
qrToPredict = allCombo$qrToPredict[j],
modelChoice = allCombo$modelChoice[j],
useStretch = allCombo$useStretch[j],
fwbw = allCombo$fwbw[j])
smoothOutput = f1smoothing:::GetSmooth(qrToFit = allCombo$qrToFit[j],
qrToPredict = allCombo$qrToPredict[j],
modelChoice = allCombo$modelChoice[j],
useStretch = allCombo$useStretch[j],
fwbw = allCombo$fwbw[j])
paste0('doneRawModel', whatToSmooth$modelChoice)
qrToFit= "q"
qrToPredict= "q"
useStretch= FALSE
fwbw= "bw"
smoothParam=list(qrToFit = qrToFit,
qrToPredict = qrToPredict,
useStretch = useStretch,
fwbw = fwbw)
smoothParamName = f1smoothing:::GetSmoothParamName()
f1smoothing:::DisplayChoice(smoothParam, modelChoice, customSmoothInfo)
cumstomSmoothInfo = NULL
modelChoice
smoothParam=list(qrToFit = qrToFit,
qrToPredict = qrToPredict,
useStretch = useStretch,
fwbw = fwbw)
smoothParamName = f1smoothing:::GetSmoothParamName()
f1smoothing:::DisplayChoice(smoothParam, modelChoice, customSmoothInfo)
customSmoothInfo = cumstomSmoothInfo
rm(cumstomSmoothInfo)
f1smoothing:::DisplayChoice(smoothParam, modelChoice, customSmoothInfo)
whatToSmooth = customSmoothInfo
whatToSmooth$modelChoice = modelChoice
### going to want to know this constantly, so define these variables just for brevity
smoothParam$useQual=smoothParam$qrToFit %in% c('q', 'qr')
smoothParam$useRace=smoothParam$qrToFit %in% c('r', 'qr')
f1smoothing:::CheckValidSmoothInfo(smoothParam, whatToSmooth)
whatToSmooth
names(raceDF)
devtools::install('model code/f1smoothing/')
devtools::install('model code/f1smoothing')
# this checks that the model has been run. could quite conceivably (in fact we do, when fitting model 4) be in situation where you want to smooth all the races but current model has not yet been fit.
rddf = f1smoothing:::DetectModelHasBeenRun(rddf, raceDF, whatToSmooth)
# this creates racePredNValid, raceDCoef, qualDCoef, stretch
rddf = f1smoothing:::MakeGeneralColumnName(rddf, smoothParam, whatToSmooth)
# this calculates when a driver/team/season has done any other races, whether they have a valid estimate today etc
rddf = f1smoothing:::DetectDriverHasOtherData(rddf, smoothParam)
rddf = f1smoothing:::MakePredNValidBin(rddf, smoothParam)
rddf = f1smoothing:::MakeNumobForPredict(rddf, smoothParam, whatToSmooth)
rddf = f1smoothing:::MakeQualRaceRescaleColumn(rddf, smoothParam)
rddf = f1smoothing:::PreSmoothRescaleDCoef(rddf, smoothParam)
OOSRddf = f1smoothing:::MakeOOSRddf(smoothParam, rddf)
dum = f1smoothing:::MakeDTFromTibble(rddf, OOSRddf, smoothParam)
raceDriverDT = dum$raceDriverDT
OOSRaceDriverDT = dum$OOSRaceDriverDT
QRRaceDriverDT = dum$QRRaceDriverDT
raceDriverDT = f1smoothing:::MakeIsPredValid(smoothParam, raceDriverDT)
if (smoothParam$qrToPredict %in% c('q', 'r')) {
pairedDriverDT = NULL
numFinisherByRace = NULL
}
if (smoothParam$qrToPredict == 'rfinpos') {
pairedDriverDT = f1smoothing:::MakePairedDriverDT(raceDriverDT)
numFinisherByRace = raceDriverDT[
!is.na(officialFinishingPosition) & hasOtherData,
.(numFinisher = .N),
'race']
}
DTList = list(raceDriverDT = raceDriverDT,
OOSRaceDriverDT = OOSRaceDriverDT,
QRRaceDriverDT = QRRaceDriverDT,
pairedDriverDT = pairedDriverDT,
numFinisherByRace = numFinisherByRace)
iterCount = 0
assign('iterCount', iterCount, env = globalenv())
maxTheta = f1smoothing:::RetrieveMaxTheta(smoothParam, whatToSmooth)
if (is.null(maxTheta) | resetMaxTheta) {
optParam = TRUE
}
if (!is.null(maxTheta) & !resetMaxTheta) {
optParam = FALSE
cat('Using previously saved parameter values for smoothing:\n')
f1smoothing:::InitialiseAndProcessCoef(maxTheta, smoothParam, display = TRUE)
}
resetMaxTheta = NULL
if (is.null(maxTheta) | resetMaxTheta) {
optParam = TRUE
}
resetMaxTheta = FALSE
maxTheta = f1smoothing:::RetrieveMaxTheta(smoothParam, whatToSmooth)
if (is.null(maxTheta) | resetMaxTheta) {
optParam = TRUE
}
if (!is.null(maxTheta) & !resetMaxTheta) {
optParam = FALSE
cat('Using previously saved parameter values for smoothing:\n')
f1smoothing:::InitialiseAndProcessCoef(maxTheta, smoothParam, display = TRUE)
}
if (optParam) {
maxTheta = f1smoothing:::OptimiseParam(smoothParam, DTList)
}
source('c:/git/f1/f1-startup.r')
f1qualifying::RunQualifyingOutlier()
f1qualifying::RunQualifyingModel()
# also, do we need driverteam in the function, how about use driverTeamYr which has already been made
# worth checking the optimisation is ok, it looked a bit flat when run on very small sample of data
SmoothAndStretch('qual')
f1outlier::GetOutlier0()
modelchoice = 4
f1validity::UpdateValidity(modelchoice)
f1laptimelm::ProcessLapTimeModel(modelchoice)
install.packages('numDeriv')
f1laptimelm::ProcessLapTimeModel(modelchoice)
CheckSensibleModel(4)
f1laptimelm::GetLapTimeLMIntercept(modelchoice)
### all checks are agreeing to desired level up to here...
SmoothAndStretch(modelchoice)
devtools::install('model code/f1smoothing')
### all checks are agreeing to desired level up to here...
SmoothAndStretch(modelchoice)
f1gaptrafficpitstop::ProcessInlapOutlapDelta()
f1gaptrafficpitstop::GetPostDeltaOvertaking()
f1carproblem::ProcessCarProblem()
# NB still got an issue: if you retrospectively declare a driver has a carproblem, then you need to update validity30 for that race, but this isn't yet happening
modelchoice = 30
f1validity::UpdateValidity(modelchoice)
f1laptimelm::ProcessLapTimeModel(modelchoice)
f1laptimelm::GetLapTimeLMIntercept(modelchoice)
SmoothAndStretch(modelchoice)
f1messystint:::ProcessInterruptedStint()
f1messystint:::ProcessGuessedPitStop()
f1messystint:::ProcessAlternativeStrategy()
f1messystint:::ProcessIntendedStopLap()
f1blockedovertakingmodel:::ProcessPossibleOvertaking()
f1blockedovertakingmodel:::ProcessBlockedOvertakingModel()
f1simulation:::ProcessInRunningWeightModel()
f1simulation:::ProcessSimulation()
install.packages('gridExtra')
sourceCpp(paste0(RCPPPATH, "simulate-overtaking.cpp"))
invlogit(3)
qlogis(3)
plogis(3)
plogis(-3)
invlogit(-3)
sourceCpp('c:/temp/test.cpp')
sourceCpp('c:/temp/test.cpp')
args(qlogis)
sourceCpp('c:/temp/test.cpp')
sourceCpp('c:/temp/test.cpp')
RcppInvlogit(3)
sourceCpp('c:/temp/test.cpp')
RcppInvlogit(3)
sourceCpp('c:/temp/test.cpp')
sourceCpp('c:/temp/test.cpp')
sourceCpp('c:/temp/test.cpp')
RcppInvlogit(3)
sourceCpp('c:/temp/test.cpp')
RcppInvlogit(3)
RcppInvlogit(3:5)
sourceCpp('c:/temp/test.cpp')
RcppInvlogit(3:5)
RcppInvlogit(2)
RcppInvlogit(-2)
RcppLogit(0.1192)
sourceCpp('c:/temp/test.cpp')
RcppLogit(0.1192)
sourceCpp('c:/temp/test.cpp')
RcppLogit(0.1192)
sourceCpp(paste0(RCPPPATH, "simulate-overtaking.cpp"))
sourceCpp(paste0(RCPPPATH, "driver-loop.cpp"))
sourceCpp(paste0(RCPPPATH, "driver-loop.cpp"))
sourceCpp('c:/temp/test.cpp', cacheDir = 'c:/temp')
ResetModelForRace('simulation', '2019abudhabi')
source('c:/git/f1/f1-startup.r')
f1simulation:::ProcessSimulation()
f1admin::UpdateDatabase()
f1plot::DriverRacePlot('2019japan','lhamilton','vbottas')
f1plot::DriverRacePlot('2019japan','lhamilton','vbottas', toFile = T)
f1data:::ViewLap('2019japan',40)
f1data:::ViewLap('2019japan',43)
f1data:::ViewLap('2019japan',42)
f1plot::DriverRacePlot('2019japan','cleclerc','svettel', toFile = T)
f1data:::ViewLap('2019japan',13)
f1data:::ViewLap('2019japan',1)
f1data:::ViewLap('2019japan',2)
f1data:::ViewLap('2019japan',3)
f1data:::ViewLap('2019japan',4)
f1plot:::RacePaceAndNumObPlot('2019mexico')
myRace = '2019mexico'
rddf = f1laptimelm::MakeNormDriverCoef(rddf, raceDF, 30, 'race')
carProblemDF = f1laptimelm::DeriveCarProblemCoef(carProblemDF, 30)
raceDF = f1data:::MakePrettyRaceLabel(raceDF)
myPaceDF = rddf %>%
filter(race == myRace & mod30PredNValid > 2) %>%
select(driver, team, mod30DCoef, mod30PredNValid) %>%
mutate(isCarProblem = FALSE)
myCarProbPaceDF = carProblemDF %>%
filter(race == myRace &
mod30PredNValid > 5 &
mod30DCoef < 5 &
isWholeRace) %>%
mutate(isCarProblem = TRUE) %>%
select(driver, mod30DCoef, mod30PredNValid, isCarProblem)
haveCarproblemDriver = nrow(myCarProbPaceDF) > 0
if (haveCarproblemDriver) {
myPaceDF = bind_rows(myPaceDF, myCarProbPaceDF)
}
myPaceDF = lazy_left_join(myPaceDF,
rddf %>%
filter(race == myRace),
'driver',
c('team', 'maxLap'))
myPaceDF = myPaceDF %>%
dplyr::rename(dcoef = mod30DCoef,
totalAvailable = maxLap,
totalCompleted = mod30PredNValid) %>%
mutate(dcoef = dcoef - min(dcoef)) %>%
arrange(-dcoef)
myPaceDF = f1plot:::.PaceNumObGetDriverSurname(myPaceDF)
myPaceDF = f1plot:::.PaceNumObGetDriverLabel(myPaceDF, 'race', haveCarproblemDriver)
myYear = with(raceDF, year[race == myRace])
myTitle = f1plot:::.PaceNumObGetPlotTitle(myRace = myRace, raceDF = raceDF)
gt = f1plot:::.PaceNumObMakeThePlot(myPaceDF, 'race', myYear, myTitle, haveCarproblemDriver)
myPaceDF
myCarProbPaceDF
myPaceDF = rddf %>%
filter(race == myRace & mod30PredNValid > 2) %>%
select(driver, team, mod30DCoef, mod30PredNValid) %>%
mutate(isCarProblem = FALSE)
myCarProbPaceDF = carProblemDF %>%
filter(race == myRace &
mod30PredNValid > 5 &
mod30DCoef < 5 &
isWholeRace) %>%
mutate(isCarProblem = TRUE) %>%
select(driver, mod30DCoef, mod30PredNValid, isCarProblem)
myPaceDF
anti_join(myPaceDF, myCarProbPaceDF, 'driver')
devtools::load_all('f1plot')
RacePaceAndNumObPlot('2019mexico')
f1plot::StintSummary('2019mexico')
f1data:::ViewLap('2019mexico', 10)
f1data:::ViewLap('2019mexico', 15)
f1data:::ViewLap('2019mexico', 22)
f1data:::ViewLap('2019mexico', 30)
raceTyreDF %>% filter(race == '2019mexico')
f1plot::StintSummary('2019mexico', toFile = T)
savePlot2 = function(file, ...) {
png(file = fileName)
plot(...)
dev.off()
}
savePlot2('c:/temp/test.png', x = 1:10, y = 1:10)
savePlot2 = function(file, ...) {
png(filename = file)
plot(...)
dev.off()
}
savePlot2('c:/temp/test.png', x = 1:10, y = 1:10)
savePlot
devtools::load_all('f1plot')
StintSummary('2019mexico', toFile = T)
devtools::load_all('f1plot')
StintSummary('2019mexico', toFile = T)
PlotTyreDeg()
PlotTyreDeg('2019mexico')
myRace = '2019mexico'
myTyreDF = raceTyreDF %>%
filter(race == myRace & isValidTyre30) %>%
select(tyre, mod30TyreInt, mod30TyreSlope)
fastestNewTyre = with(myTyreDF, tyre[near(mod30TyreInt, 0)])
stintLength = 30
tyreWearDF = left_join(expand.grid(tyre = myTyreDF$tyre,
tyreLap = 0:(stintLength - 1),
stringsAsFactors = FALSE),
myTyreDF,
'tyre')
tyreWearDF
raceTyreDF %>% filter(race == myRace)
devtools::load_all('f1plot')
PlotTyreDeg('2019mexico')
f1data:::ViewLap('2019mexico', 4)
f1data:::ViewLap('2019mexico', 5)
PlotTyreDeg('2019mexico', toFile = T)
f1plot::DriverRacePlot('2019mexico','sperez','dricciardo')
f1plot::DriverRacePlot('2019mexico','sperez',includeAdjustedTime = T)
ReadF1Data(paste0(OUTPUTPATH, team-colour.csv))
ReadF1Data('paste0(OUTPUTPATH, team-colour.csv'), 'teamColour')
ReadF1Data(paste0(OUTPUTPATH, team-colour.csv'), 'teamColour')
ReadF1Data(paste0(OUTPUTPATH, 'team-colour.csv'), 'teamColour')
devtools::load_all('f1plot')
DriverRacePlot('2019mexico','sperez')
DriverRacePlot('2019mexico','sperez', includeAdjustedTime = T)
DriverRacePlot('2019mexico','dricciardo', includeAdjustedTime = T)
DriverRacePlot('2019mexico','mverstappen', 'aalbon')
DriverRacePlot('2019mexico','mverstappen', 'aalbon', toFile = TRUE)
source('f1-startup.r')
f1plot:::RacePaceAndNumObPlot('2019usa')
SetUpModel()
f1plot:::RacePaceAndNumObPlot('2019usa')
f1plot:::StintSummary('2019usa',toFile = T)
devtools::install('f1plot')
f1plot:::StintSummary('2019usa',toFile = T)
f1plot:::PlotTyreDeg('2019usa', toFile = T)
f1data:::ViewLap('2019usa',38)
f1data:::ViewLap('2019usa',55)
f1data:::ViewLap('2019usa',54)
f1data:::ViewLap('2019usa',38)
f1data:::ViewLap('2019usa',55)
f1plot:::DriverRacePlot('2019usa','kraikkonen','agiovinazzi')
f1data:::ViewLap('2019usa',38)
f1data:::ViewLap('2019usa',52)
f1data:::ViewLap('2019usa',38)
f1data:::ViewLap('2019usa',53)
f1data:::ViewLap('2019usa',1)
f1data:::ViewLap('2019usa',2)
f1data:::ViewLap('2019usa',55)
f1data:::ViewLap('2019usa',56)
f1data:::ViewLap('2019usa',57)
f1data:::ViewLap('2019usa',56)
f1data:::ViewLap('2019usa',55)
f1data:::ViewDriverComment('2019usa', 'aalbon')
f1plot:::StintSummary('2019brazil', toFile = toFile)
f1plot:::StintSummary('2019brazil', toFile = TRUE)
f1plot:::DriverRacePlot('2019brazil','cleclerc','svettel')
f1plot:::DriverRacePlot('2019brazil','csainz')
f1plot:::DriverRacePlot('2019brazil','csainz', 'pgasly')
f1plot:::DriverRacePlot('2019brazil','csainz', 'dricciardo')
f1plot:::DriverRacePlot('2019brazil','csainz', 'pgasly')
f1plot:::DriverRacePlot('2019brazil','csainz', 'kraikkonen')
f1data:::ViewLap('2019brazil', 20)
f1data:::ViewLap('2019brazil', 30)
f1data:::ViewLap('2019brazil', 40)
f1data:::ViewLap('2019brazil', 50)
f1plot:::DriverRacePlot('2019brazil','csainz', 'kraikkonen', toFile = TRUE)
f1plot:::DriverRacePlot('2019brazil','dricciardo', 'raikkonen', toFile = TRUE)
f1plot:::DriverRacePlot('2019brazil','dricciardo', 'nhulkenberg', toFile = TRUE)
f1data:::ViewLap('2019brazil', 71])
f1data:::ViewLap('2019brazil', 71)
f1plot:::RacePaceAndNumObPlot('2019abudhabi')
f1data:::ViewLap('2019abudhabi', 30)
f1data:::ViewLap('2019abudhabi', 40)
f1data:::ViewLap('2019abudhabi', 55)
f1plot:::DriverRacePlot('2019abudhabi','csainz','sperez')
f1plot:::DriverRacePlot('2019abudhabi','lnorris','sperez')
f1plot:::StintSummary('2019abudhabi')
f1plot:::DriverRacePlot('2019abudhabi','lnorris','dvyat')
f1plot:::DriverRacePlot('2019abudhabi','lnorris','dkvyat')
f1plot:::StintSummary('2019abudhabi')
f1plot:::DriverRacePlot('2019abudhabi','lnorris','pgasly')
f1plot:::DriverRacePlot('2019abudhabi','lnorris','dkvyat', toFile = TRUE)
f1plot:::DriverRacePlot('2019abudhabi','dricciardo','nhulkenberg', toFile = TRUE)
source('f1-startup.r')
f1plot:::CombineTeamMateComparison(2019,30)
devtools::install('f1plot')
f1plot:::CombineTeamMateComparison(2019,30)
SetUpModel()
f1plot:::CombineTeamMateComparison(2019,30)
myYear = 2019
modelchoice = 30
PLOTPATH = paste(OUTPUTPATH, myYear, '/tmcomparison/modelchoice', modelchoice, '/', sep = '')
if (!dir.exists(PLOTPATH)) dir.create(PLOTPATH)
tmpairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
tmpairing
tmpairing[8,c('driver1','driver2')] = c('mverstappen','aalbon')
tmpairing[10,c('driver1','driver2')] = c('dkvyat','aalbon')
# do we want to add main title? if it's the first in the list, yes
tmpairing = tmpairing %>%
group_by(team) %>%
mutate(addmaintitle = c(TRUE, rep(FALSE, n() - 1))) %>%
ungroup()
for (j in 1:nrow(tmpairing)) {
f1plot:::TeamMateComparison(myYear, tmpairing$driver1[j], tmpairing$driver2[j], modelchoice,
toFile = TRUE, addmaintitle = tmpairing$addmaintitle[j])
}
# now we want to combine the pairings by team
myunteam = unique(tmpairing$team)
for (j in 1:length(myunteam)) {
currentnumpair = sum(tmpairing$team == myunteam[j])
currentTeamCombinedShortFile = gsub(' ', '', paste(myunteam[j], '_', myYear, '_',  modelchoice, '.png', sep = ''))
currentPairingShortFile = with(tmpairing, paste(driver1, '_', driver2, '_', myYear, '_', modelchoice,'.png', sep = '')[team == myunteam[j]],)
currentTeamCombinedFile = f1plot:::.TeamMateMakeFile(myYear, modelchoice, currentTeamCombinedShortFile)
currentPairingFile = f1plot:::.TeamMateMakeFile(myYear, modelchoice, currentPairingShortFile)
aafunct::PictureMerge(currentPairingFile,
currentTeamCombinedFile,
rep(1, currentnumpair),
deleteSourceFile = TRUE)
}
f1plot:::YearlyPacePlot(2019)
devtools::install('model code/f1yearlycoef/')
devtools::install('model code/f1yearlycoef')
f1plot:::YearlyPacePlot(2019)
q()
source('f1-startup.r')
SetUpModel()
source('project/validate via finpos/messy-race-funct.r')
rddf = MakeCleanRace(rddf, 30)
lbl = f1gaptrafficpitstop::GetGapAhead(lbl, isPreDelta = FALSE)
# lbl = f1gaptrafficpitstop::AdjustLapTimeForPitStop(lbl)
lbl = f1laptimelm:::MakePredSec(lbl, modelChoice)
modelChoice =3 0
modelChoice =30
# lbl = f1gaptrafficpitstop::AdjustLapTimeForPitStop(lbl)
lbl = f1laptimelm:::MakePredSec(lbl, modelChoice)
lbl = f1validity::MakeIsRogue(lbl)
dum = MakeRetirementLap(rddf, lbl)
rddf = dum$rddf
lbl = dum$lbl
raceDF = f1gaptrafficpitstop:::CalculateMedianPitStopTime(raceDF)
rddf = DetectVerySlowPitStop(pitStopDF, raceDF, rddf)
rddf = DetectVerySlowLap(rddf, lbl, modelChoice)
rddf = DetectFirstLapIssue(rddf, lbl)
rddf = AlignCarProblem(rddf, carProblemDF)
rddf = DetectSimulationIssue(rddf, lbl)
lbl = MakeMFDelta(lbl)
names(lbl)
dum = lbl %>%
group_by(race, driver) %>%
arrange(lap) %>%
mutate(mfDelta = c(diff(meanFinPos),NA))
lbl = lazy_left_join(lbl, dum, c('race','driver','lap'), 'mfDelta')
SetUpModel()
rddf = MakeCleanRace(rddf, 30)
source('project/validate via finpos/messy-race-funct.r')
rddf = MakeCleanRace(rddf, 30)
modelChoice = 30
lbl = f1gaptrafficpitstop::GetGapAhead(lbl, isPreDelta = FALSE)
# lbl = f1gaptrafficpitstop::AdjustLapTimeForPitStop(lbl)
lbl = f1laptimelm:::MakePredSec(lbl, modelChoice)
lbl = f1validity::MakeIsRogue(lbl)
dum = MakeRetirementLap(rddf, lbl)
rddf = dum$rddf
lbl = dum$lbl
raceDF = f1gaptrafficpitstop:::CalculateMedianPitStopTime(raceDF)
rddf = DetectVerySlowPitStop(pitStopDF, raceDF, rddf)
rddf = DetectVerySlowLap(rddf, lbl, modelChoice)
rddf = DetectFirstLapIssue(rddf, lbl)
rddf = AlignCarProblem(rddf, carProblemDF)
rddf = DetectSimulationIssue(rddf, lbl)
rddf = DetectBadQualifying(rddf, modelChoice)
if (modelChoice == 4) {
rddf = lazy_left_join(rddf, raceDF, 'race', 'isValidRace4') %>%
rename(isValidRace = isValidRace4)
}
if (modelChoice == 30) {
rddf = lazy_left_join(rddf, raceDF, 'race', 'isValidRace30') %>%
rename(isValidRace = isValidRace30)
}
messinessColumn = c('qualMessiness', 'slowPitStopMessiness', 'carProblemMessiness',
'verySlowLapMessiness', 'simIndicatesDisasterMessiness',
'firstLapMessiness', 'retirementMessiness', 'invalidRaceMessiness')
rddf = rddf %>%
mutate(qualMessiness = case_when(
qualDelta < 5 ~ 0,
between(qualDelta, 5, 7) ~ 0.5,
qualDelta > 7 ~ 1),
slowPitStopMessiness = 0.5 * hadVerySlowPitStop,
carProblemMessiness = 1 * hadCarProblem,
verySlowLapMessiness = 0.5*hadVerySlowLap,
simIndicatesDisasterMessiness = 1 * simIndicatesDisaster,
firstLapMessiness = case_when(
hadFirstLapDisaster ~ 1,
hadFirstLapProblem ~ 0.5,
TRUE ~ 0),
retirementMessiness = 1 * isRetirement,
invalidRaceMessiness = 1 * !isValidRace)
rddf$cleanliness = 1 - apply(rddf[,messinessColumn], 1, max)
# don't think you would ever want all the individual messiness columns so remove those in all cases
rddf = remove_column(rddf, messinessColumn)
names(rddf)
problemColumn = c('qualDelta', 'hadVerySlowPitStop', 'hadCarProblem', 'hadVerySlowLap',
'simIndicatesDisaster', 'hadFirstLapDisaster', 'hadFirstLapProblem',
'isRetirement', 'isValidRace')
rddf = remove_column(rddf, problemColumn)
if (!includeIntermediateColumn) {
problemColumn = c('qualDelta', 'hadVerySlowPitStop', 'hadCarProblem', 'hadVerySlowLap',
'simIndicatesDisaster', 'hadFirstLapDisaster', 'hadFirstLapProblem',
'isRetirement', 'isValidRace')
rddf = remove_column(rddf, problemColumn)
}
names(rddf)
SetUpModel()
rddf = MakeCleanRace(rddf, 30, includeIntermediateColumn = TRUE)
names(rddf)
rddf %>% filter(year == 2019 & driver == 'lhamilton') %>% select(isRetirement, hadVerySlowPitStop, hadVerySlowLap, hadFirstLapDisaster, hadFirstLapProblem, hadCarProblem, simIndicatesDisaster, cleanliness)
rddf %>% filter(year == 2019 & driver == 'lhamilton') %>% arrange(date) %>% select(race, isRetirement, hadVerySlowPitStop, hadVerySlowLap, hadFirstLapDisaster, hadFirstLapProblem, hadCarProblem, simIndicatesDisaster, cleanliness)
names(rddf)
rddf %>% filter(year == 2019 & driver == 'lhamilton') %>% arrange(daynum) %>% select(race, isRetirement, hadVerySlowPitStop, hadVerySlowLap, hadFirstLapDisaster, hadFirstLapProblem, hadCarProblem, simIndicatesDisaster, cleanliness)
View(rddf %>% filter(year == 2019 & driver == 'lhamilton') %>% arrange(daynum) %>% select(race, isRetirement, hadVerySlowPitStop, hadVerySlowLap, hadFirstLapDisaster, hadFirstLapProblem, hadCarProblem, simIndicatesDisaster, cleanliness))
View(rddf %>% filter(year == 2019 & driver == 'svettel') %>% arrange(daynum) %>% select(race, isRetirement, hadVerySlowPitStop, hadVerySlowLap, hadFirstLapDisaster, hadFirstLapProblem, hadCarProblem, simIndicatesDisaster, cleanliness))
