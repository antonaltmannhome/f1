# then what we actually do
lbl = f1laptimelm::CalculateFuelTyreEffect(lbl, 30)
SetUpModel()
CheckTeamYear = function(myTeam, myYear) {
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreLapOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelTyreLapOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreLapOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreTypeOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelTyreTypeOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreTypeOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreCommonSlopeLm(., myTeam = myTeam, myYear = myYear))
fuelTyreCommonSlopeLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreCommonSlopeLmDF, c('race', 'driver', 'lap'))
return(lbl)
}
lbl = lazy_left_join(lbl, rddf, c('race', 'driver'), 'team')
# then what we actually do
lbl = f1laptimelm::CalculateFuelTyreEffect(lbl, 30)
FitFuelOnlyLm = function(myLbl, myTeam, myYear) {
mod = lm(sec ~ factor(driver) + fuel,
data = myLbl %>% filter(!(team == myTeam & year == myYear)))
myLbl$fuelOnlyEffect = coef(mod)[['fuel']] * myLbl$fuel
return(myLbl %>%
select(race, driver, lap, fuelOnlyEffect))
}
#### then fuel plus
FitFuelTyreLapOnlyLm = function(myLbl, myTeam, myYear) {
mod = lm(sec ~ factor(driver) + fuel + tyreLap,
data = myLbl %>% filter(!(team == myTeam & year == myYear)))
myLbl$fuelTyreLapOnlyEffect = coef(mod)[['fuel']] * myLbl$fuel + coef(mod)[['tyreLap']] * myLbl$tyreLap
return(myLbl %>%
select(race, driver, lap, fuelTyreLapOnlyEffect))
}
FitFuelTyreTypeOnlyLm = function(myLbl, myTeam, myYear) {
mod = lm(sec ~ factor(driver) + fuel + factor(tyre),
data = myLbl %>% filter(!(team == myTeam & year == myYear)))
# what a hassle..
uglyTyreCoef = coef(mod)[grep('factor\\(tyre\\)', names(coef(mod)))]
neatTyreCoefDF = list_to_tibble(uglyTyreCoef, 'coef', 'tyre') %>%
mutate(tyre = gsub('factor\\(tyre\\)', '', tyre))
missingTyre = setdiff(unique(myLbl$tyre), neatTyreCoefDF$tyre)
neatTyreCoefDF = add_row(neatTyreCoefDF, tyre = missingTyre, coef = 0)
myLbl$tyreTypeEffect = neatTyreCoefDF$coef[match(myLbl$tyre, neatTyreCoefDF$tyre)]
myLbl$fuelTyreTypeOnlyEffect = coef(mod)[['fuel']] * myLbl$fuel + myLbl$tyreTypeEffect
return(myLbl %>%
select(race, driver, lap, fuelTyreTypeOnlyEffect))
}
### then, fuel and tyre age and type, but common slope for them
FitFuelTyreCommonSlopeLm = function(myLbl, myTeam, myYear) {
FitFuelTyreCommonSlopeLm = function(myLbl, myTeam, myYear) {
mod = lm(sec ~ factor(driver) + fuel + factor(tyre) + tyreLap,
data = myLbl %>% filter(!(team == myTeam & year == myYear))
# what a hassle..
uglyTyreCoef = coef(mod)[grep('factor\\(tyre\\)', names(coef(mod)))]
neatTyreCoefDF = list_to_tibble(uglyTyreCoef, 'coef', 'tyre') %>%
mutate(tyre = gsub('factor\\(tyre\\)', '', tyre))
missingTyre = setdiff(unique(myLbl$tyre), neatTyreCoefDF$tyre)
neatTyreCoefDF = add_row(neatTyreCoefDF, tyre = missingTyre, coef = 0)
myLbl$tyreTypeEffect = neatTyreCoefDF$coef[match(myLbl$tyre, neatTyreCoefDF$tyre)]
myLbl$fuelTyreCommonSlopeEffect = coef(mod)[['fuel']] * myLbl$fuel + myLbl$tyreTypeEffect + coef(mod)[['tyreLap']] * myLbl$tyreLap
return(myLbl %>%
select(race, driver, lap, fuelTyreCommonSlopeEffect))
}
myTeam = 'renault'
myYear = 2019
mod = lm(sec ~ factor(driver) + fuel + factor(tyre) + tyreLap,
data = myLbl %>% filter(!(team == myTeam & year == myYear))
# what a hassle..
uglyTyreCoef = coef(mod)[grep('factor\\(tyre\\)', names(coef(mod)))]
neatTyreCoefDF = list_to_tibble(uglyTyreCoef, 'coef', 'tyre') %>%
mutate(tyre = gsub('factor\\(tyre\\)', '', tyre))
missingTyre = setdiff(unique(myLbl$tyre), neatTyreCoefDF$tyre)
neatTyreCoefDF = add_row(neatTyreCoefDF, tyre = missingTyre, coef = 0)
myLbl$tyreTypeEffect = neatTyreCoefDF$coef[match(myLbl$tyre, neatTyreCoefDF$tyre)]
myLbl$fuelTyreCommonSlopeEffect = coef(mod)[['fuel']] * myLbl$fuel + myLbl$tyreTypeEffect + coef(mod)[['tyreLap']] * myLbl$tyreLap
return(myLbl %>%
select(race, driver, lap, fuelTyreCommonSlopeEffect))
}
# these names are a little confusing to be fair
# but they're not fitted out of sample so isn't the most complicated bound to win? not sure
# so, first model assume all team mates are equally good, predict lap time difference.
# we're only predicting a subset of the data, so maybe it's not guaranteed to be better for a small sample?
# no i think it's still guaranteed to be better once we've aggregated over all pairings.
# but we could loop over all team-seasons, eliminate that team's data, then refit the models above. that is a great idea in fact
CheckTeamYear = function(myTeam, myYear) {
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreLapOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelTyreLapOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreLapOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreTypeOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelTyreTypeOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreTypeOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreCommonSlopeLm(., myTeam = myTeam, myYear = myYear))
fuelTyreCommonSlopeLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreCommonSlopeLmDF, c('race', 'driver', 'lap'))
return(lbl)
}
mod = lm(sec ~ factor(driver) + fuel + factor(tyre) + tyreLap,
data = myLbl %>% filter(!(team == myTeam & year == myYear))
# what a hassle..
uglyTyreCoef = coef(mod)[grep('factor\\(tyre\\)', names(coef(mod)))]
neatTyreCoefDF = list_to_tibble(uglyTyreCoef, 'coef', 'tyre') %>%
mutate(tyre = gsub('factor\\(tyre\\)', '', tyre))
missingTyre = setdiff(unique(myLbl$tyre), neatTyreCoefDF$tyre)
neatTyreCoefDF = add_row(neatTyreCoefDF, tyre = missingTyre, coef = 0)
myLbl$tyreTypeEffect = neatTyreCoefDF$coef[match(myLbl$tyre, neatTyreCoefDF$tyre)]
myLbl$fuelTyreCommonSlopeEffect = coef(mod)[['fuel']] * myLbl$fuel + myLbl$tyreTypeEffect + coef(mod)[['tyreLap']] * myLbl$tyreLap
return(myLbl %>%
select(race, driver, lap, fuelTyreCommonSlopeEffect))
}
# these names are a little confusing to be fair
# but they're not fitted out of sample so isn't the most complicated bound to win? not sure
# so, first model assume all team mates are equally good, predict lap time difference.
# we're only predicting a subset of the data, so maybe it's not guaranteed to be better for a small sample?
# no i think it's still guaranteed to be better once we've aggregated over all pairings.
# but we could loop over all team-seasons, eliminate that team's data, then refit the models above. that is a great idea in fact
CheckTeamYear = function(myTeam, myYear) {
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreLapOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelTyreLapOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreLapOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreTypeOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelTyreTypeOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreTypeOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreCommonSlopeLm(., myTeam = myTeam, myYear = myYear))
fuelTyreCommonSlopeLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreCommonSlopeLmDF, c('race', 'driver', 'lap'))
return(lbl)
}
FitFuelTyreCommonSlopeLm = function(myLbl, myTeam, myYear) {
mod = lm(sec ~ factor(driver) + fuel + factor(tyre) + tyreLap,
data = myLbl %>% filter(!(team == myTeam & year == myYear)))
# what a hassle..
uglyTyreCoef = coef(mod)[grep('factor\\(tyre\\)', names(coef(mod)))]
neatTyreCoefDF = list_to_tibble(uglyTyreCoef, 'coef', 'tyre') %>%
mutate(tyre = gsub('factor\\(tyre\\)', '', tyre))
missingTyre = setdiff(unique(myLbl$tyre), neatTyreCoefDF$tyre)
neatTyreCoefDF = add_row(neatTyreCoefDF, tyre = missingTyre, coef = 0)
myLbl$tyreTypeEffect = neatTyreCoefDF$coef[match(myLbl$tyre, neatTyreCoefDF$tyre)]
myLbl$fuelTyreCommonSlopeEffect = coef(mod)[['fuel']] * myLbl$fuel + myLbl$tyreTypeEffect + coef(mod)[['tyreLap']] * myLbl$tyreLap
return(myLbl %>%
select(race, driver, lap, fuelTyreCommonSlopeEffect))
}
CheckTeamYear = function(myTeam, myYear) {
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreLapOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelTyreLapOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreLapOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreTypeOnlyLm(., myTeam = myTeam, myYear = myYear))
fuelTyreTypeOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreTypeOnlyLmDF, c('race', 'driver', 'lap'))
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(FitFuelTyreCommonSlopeLm(., myTeam = myTeam, myYear = myYear))
fuelTyreCommonSlopeLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelTyreCommonSlopeLmDF, c('race', 'driver', 'lap'))
return(lbl)
}
dum = CheckTeamYear('renault', 2019)
names(dum)
myDriv1 = 'dricciardo'
myDriv2 = 'nhulkenberg'
# now we make the data frame with relevant comparisons
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'modalFinPosProb',
'fuelOnlyEffect', 'fuelTyreLapOnlyEffect',
'fuelTyreTypeOnlyEffect', 'fuelTyreCommonSlopeEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, modalFinPosProb,
fuelOnlyEffect, fuelTyreLapOnlyEffect,
fuelTyreTypeOnlyEffect, fuelTyreCommonSlopeEffect)
names(myLbl)
SetUpModel()
lbl = lazy_left_join(lbl, rddf, c('race', 'driver'), 'team')
SetUpModel()
SingleRaceFitFuelOnlyLm = function(myLbl) {
mod = lm(sec ~ factor(driver) + fuel, data = myLbl)
myLbl$fuelOnlyEffect = coef(mod)[['fuel']] * myLbl$fuel
return(myLbl %>%
select(race, driver, lap, fuelOnlyEffect))
}
FitFuelOnlyLm = function(lbl, myDriv1, myDriv2, myYear) {
myList = lbl %>%
filter(isGood30 & !(driver %in% c('driv1, driv2') & year == myYear)) %>%
group_by(race) %>%
do(SingleRaceFitFuelOnlyLm(.ar))
fuelOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelOnlyLmDF, c('race', 'driver', 'lap'))
return(lbl)
}
lbl = FitFuelOnlyLm(lbl, 'dricciardo', 'nhulkenberg', 2019)
FitFuelOnlyLm = function(lbl, myDriv1, myDriv2, myYear) {
myList = lbl %>%
filter(isGood30 & !(driver %in% c('driv1, driv2') & year == myYear)) %>%
group_by(race) %>%
do(SingleRaceFitFuelOnlyLm(.))
fuelOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelOnlyLmDF, c('race', 'driver', 'lap'))
return(lbl)
}
lbl = FitFuelOnlyLm(lbl, 'dricciardo', 'nhulkenberg', 2019)
lbl2 = FitFuelOnlyLm(lbl, 'aalbon', 'dkvyat', 2019)
lbl2 %>% filter(race == '2019australia' & driver == 'dkvyat') %>% select(fuelOnlyEffect)
SetUpModel()
lbl = FitFuelOnlyLm(lbl, 'dricciardo', 'nhulkenberg', 2019)
names(lbl)
lbl2 = FitFuelOnlyLm(lbl, 'lstroll', 'sperez', 2019)
lbl2 %>% filter(race == '2019australia' & driver == 'dkvyat') %>% select(fuelOnlyEffect)
lbl2 %>% filter(race == '2019australia' & driver == 'dkvyat') %>% select(fuelOnlyEffect.x, fuelOnlyEffect.y)
lbl2 %>% filter(race == '2019australia' & driver == 'sperez') %>% select(fuelOnlyEffect.x, fuelOnlyEffect.y)
all.equal(lbl2$fuelOnlyEffect.x, lbl2$fuelOnlyEffect.y)
lbl = within(lbl, rm(fuelOnlyEffect))
SingleRaceFitFuelOnlyLm = function(myLbl) {
mod = lm(sec ~ factor(driver) + fuel, data = myLbl)
myLbl$fuelOnlyEffect = coef(mod)[['fuel']] * myLbl$fuel
return(myLbl %>%
select(race, driver, lap, fuelOnlyEffect))
}
FitFuelOnlyLm = function(lbl, myDriv1, myDriv2, myYear) {
myList = lbl %>%
filter(isGood30 & !(driver %in% c(myDriv1, myDriv2) & year == myYear)) %>%
group_by(race) %>%
do(SingleRaceFitFuelOnlyLm(.))
fuelOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelOnlyLmDF, c('race', 'driver', 'lap'))
return(lbl)
}
lbl = FitFuelOnlyLm(lbl, 'dricciardo', 'nhulkenberg', 2019)
lbl = FitFuelOnlyLm(lbl, 'lstroll', 'sperez', 2019)
all.equal(lbl$fuelOnlyEffect.x, lbl$fuelOnlyEffect.y)
lbl2 %>% filter(race == '2019australia' & driver == 'sperez') %>% select(fuelOnlyEffect.x, fuelOnlyEffect.y)
lbl %>% filter(race == '2019australia' & driver == 'sperez') %>% select(fuelOnlyEffect.x, fuelOnlyEffect.y)
SetUpModel()
SingleRaceFitFuelOnlyLm = function(myLbl, myDriv1, myDriv2, myYear) {
mod = lm(sec ~ factor(driver) + fuel,
data = myLbl %>% filter(!(driver %in% c(myDriv1, myDriv2) & year == myYear)))
myLbl$fuelOnlyEffect = coef(mod)[['fuel']] * myLbl$fuel
return(myLbl %>%
select(race, driver, lap, fuelOnlyEffect))
}
FitFuelOnlyLm = function(lbl, myDriv1, myDriv2, myYear) {
myList = lbl %>%
filter(isGood30) %>%
group_by(race) %>%
do(SingleRaceFitFuelOnlyLm(., myDriv1 = myDriv1, myDriv2 = myDriv2, myYear = myYear))
fuelOnlyLmDF = bind_rows(myList)
lbl = left_join(lbl, fuelOnlyLmDF, c('race', 'driver', 'lap'))
return(lbl)
}
lbl2 = FitFuelOnlyLm(lbl, 'sperez', 'lstroll')
lbl2 = FitFuelOnlyLm(lbl, 'sperez', 'lstroll', 2019)
lbl2 = FitFuelOnlyLm(lbl2, 'dricciardo', 'nhulkenberg', 2019)
lbl %>% filter(race == '2019australia' & driver == 'sperez') %>% select(fuelOnlyEffect.x, fuelOnlyEffect.y)
lbl2 %>% filter(race == '2019australia' & driver == 'sperez') %>% select(fuelOnlyEffect.x, fuelOnlyEffect.y)
lbl2 %>% filter(race == '2019australia' & driver == 'sperez') %>% select(isGood30, fuelOnlyEffect.x, fuelOnlyEffect.y)
SetUpModel()
source('f1-startup.r')
SetUpModel()
f1plot:::RacePaceAndNumObPlot('2019brazil')
source('f1-startup.r')
SetUpModel()
names(lbl)
myDriv1 = 'nhulkneberg'
myDriv2 = 'dricciardo'
myYear = 2019
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
horizLbl = myLbl %>%
select(race, lap, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl = myLbl %>%
select(race, lap, driver, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl %>% head
myDriv1 = 'nhulkenberg'
myDriv2 = 'dricciardo'
myYear = 2019
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
horizLbl = myLbl %>%
select(race, lap, driver, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl %>% head
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, colToSpread)
dum = myLbl %>%
select(race, lap, driver, colToSpread)
head(dum)
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, get(colToSpread))
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
## horrible names of course, so rename
badName = expand.grid(c(myDriv1, myDriv2), colToSpread)
badName
apply(badName, 1, paste, collapse = '_')
names(horizLbl)
## horrible names of course, so rename
badName = apply(expand.grid('driver', c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_')
badName
badName %in% names(horizLbl)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
badName %in% names(horizLbl)
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x)), collapse = '_')
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = '_'))
goodName
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
cbind(badName, goodName)
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
head(horizLbl)
rddf %>% filter(year == 2019 & team == 'renault') %>% select(race, driver, finpos) %>% spread(key = driver, value = finpos)
rddf %>% filter(year == 2019 & team == 'renault') %>% select(race, driver, officialFinishingPosition) %>% spread(key = driver, value = officialFinishingPosition)
horizLbl %>% filter(race == '2019china')
myLbl$fuelTyreEffect = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl$fuelTyreEffect = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
names(myLbl)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
fuck = horizLbl = myLbl %>%
select(race, lap, driver, colToSpread)
head(fuck)
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
names(myLbl)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
myLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2))
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2))
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n())
# now filter out laps where either driver had carproblem
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n())
with(lbl, sum(wasBlocked & !inTraffic))
with(lbl, sum(wasBlocked & !inTraffic, na.rm = T))
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# then, filter out traffic laps
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n())
# and what if we take away fuel and tyre effect?
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect - (sec2 - fuelTyreEffect)),
numLap = n())
# and what if we take away fuel and tyre effect?
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n())
rm(horizLbl, myLbl)
CheckOne = function(myYear, myDriv1, myDriv2) {
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
message('All laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# now filter out laps where either driver had carproblem
message('Exclude car problem laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude traffic laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# and what if we take away fuel and tyre effect?
message('Adjust for fuel and tyres:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n()))
}
CheckOne(2019, 'lhamilton', 'vbottas')
CheckOne(2019, 'svettel', 'cleclerc')
CheckOne(2019, 'sperez', 'lstroll')
CheckOne(2019, 'mverstappen', 'pgasly')
CheckOne(2019, 'kraikkonen', 'agiovinazzi')
CheckOne(2019, 'rgrosjean', 'kmagnussen')
CheckOne(2019, 'csainz', 'lnorris')
CheckOne(2019, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'grussell', 'rkubica')
CheckOne(2014, 'dricciardo', 'svettel')
CheckOne(2014, 'dricciardo', 'mverstappen')
CheckOne(2017, 'dricciardo', 'mverstappen')
CheckOne(2018, 'dricciardo', 'mverstappen')
names(lbl)
CheckOne = function(myYear, myDriv1, myDriv2) {
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
message('All laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# now filter out laps where either driver had carproblem
message('Exclude car problem laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude traffic laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude dead rubber laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# and what if we take away fuel and tyre effect?
message('Adjust for fuel and tyres:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n()))
}
CheckOne(2018, 'dricciardo', 'mverstappen')
CheckOne(2018, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'lhamilton', 'vbottas')
CheckOne(2016, 'lhamilton', 'nrosberg')
CheckOne(2015, 'lhamilton', 'nrosberg')
CheckOne(2014, 'lhamilton', 'nrosberg')
CheckOne(2013, 'lhamilton', 'nrosberg')
CheckOne(2012, 'lhamilton', 'jbutton')
CheckOne(2011, 'lhamilton', 'jbutton')
CheckOne(2011, 'sperez', 'kkobayashi')
CheckOne(2012, 'sperez', 'kkobayashi')
source('f1-startup.r')
SetUpModel()
dum = f1smoothing::GetSmooth('qr','q','bw',TRUE,30)
dum$smoothDF %>% filter(race == '2019abudhabi') %>% arrange(smoothDCoef)
dum$smoothDF %>% filter(race == '2019brazil') %>% arrange(smoothDCoef)
#rddf %>% filter(year == 2019 & driver=='kmagnussen')) %>% select(race, startin)
names(rddf)
rddf %>% filter(year == 2019 & driver=='kmagnussen')) %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='kmagnussen') %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='sperez') %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='agiovinazzi') %>% select(race, startingGrid)
qdf[1,]
nrow(qdf)
nrow(rddf)
dim(qsdf)
dim(qualifyingSessionDF)
