source('f1-startup.r')
SetUpModel()
names(lbl)
myDriv1 = 'nhulkneberg'
myDriv2 = 'dricciardo'
myYear = 2019
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
horizLbl = myLbl %>%
select(race, lap, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl = myLbl %>%
select(race, lap, driver, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl %>% head
myDriv1 = 'nhulkenberg'
myDriv2 = 'dricciardo'
myYear = 2019
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
horizLbl = myLbl %>%
select(race, lap, driver, sec, wasBlocked, inTraffic, isCarProblem) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
horizLbl %>% head
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, colToSpread)
dum = myLbl %>%
select(race, lap, driver, colToSpread)
head(dum)
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, get(colToSpread))
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem)
## horrible names of course, so rename
badName = expand.grid(c(myDriv1, myDriv2), colToSpread)
badName
apply(badName, 1, paste, collapse = '_')
names(horizLbl)
## horrible names of course, so rename
badName = apply(expand.grid('driver', c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_')
badName
badName %in% names(horizLbl)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
badName %in% names(horizLbl)
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x)), collapse = '_')
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = '_'))
goodName
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
cbind(badName, goodName)
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
head(horizLbl)
rddf %>% filter(year == 2019 & team == 'renault') %>% select(race, driver, finpos) %>% spread(key = driver, value = finpos)
rddf %>% filter(year == 2019 & team == 'renault') %>% select(race, driver, officialFinishingPosition) %>% spread(key = driver, value = officialFinishingPosition)
horizLbl %>% filter(race == '2019china')
myLbl$fuelTyreEffect = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl$fuelTyreEffect = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
names(myLbl)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
fuck = horizLbl = myLbl %>%
select(race, lap, driver, colToSpread)
head(fuck)
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
names(myLbl)
colToSpread = c('sec', 'wasBlocked', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, wasBlocked, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
myLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2))
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2))
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n())
# now filter out laps where either driver had carproblem
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n())
with(lbl, sum(wasBlocked & !inTraffic))
with(lbl, sum(wasBlocked & !inTraffic, na.rm = T))
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# then, filter out traffic laps
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n())
# and what if we take away fuel and tyre effect?
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect - (sec2 - fuelTyreEffect)),
numLap = n())
# and what if we take away fuel and tyre effect?
horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n())
rm(horizLbl, myLbl)
CheckOne = function(myYear, myDriv1, myDriv2) {
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
message('All laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# now filter out laps where either driver had carproblem
message('Exclude car problem laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude traffic laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# and what if we take away fuel and tyre effect?
message('Adjust for fuel and tyres:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n()))
}
CheckOne(2019, 'lhamilton', 'vbottas')
CheckOne(2019, 'svettel', 'cleclerc')
CheckOne(2019, 'sperez', 'lstroll')
CheckOne(2019, 'mverstappen', 'pgasly')
CheckOne(2019, 'kraikkonen', 'agiovinazzi')
CheckOne(2019, 'rgrosjean', 'kmagnussen')
CheckOne(2019, 'csainz', 'lnorris')
CheckOne(2019, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'grussell', 'rkubica')
CheckOne(2014, 'dricciardo', 'svettel')
CheckOne(2014, 'dricciardo', 'mverstappen')
CheckOne(2017, 'dricciardo', 'mverstappen')
CheckOne(2018, 'dricciardo', 'mverstappen')
names(lbl)
CheckOne = function(myYear, myDriv1, myDriv2) {
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue)
myLbl = f1laptimelm::CalculateFuelTyreEffect(myLbl, 30)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
message('All laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2)) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# now filter out laps where either driver had carproblem
message('Exclude car problem laps:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude traffic laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
message('Exclude dead rubber laps:')
# then, filter out traffic laps
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99) %>%
summarise(mean(sec1 - sec2),
numLap = n()))
# and what if we take away fuel and tyre effect?
message('Adjust for fuel and tyres:')
print(horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99) %>%
summarise(mean(sec1 - fuelTyreEffect1 - (sec2 - fuelTyreEffect2)),
numLap = n()))
}
CheckOne(2018, 'dricciardo', 'mverstappen')
CheckOne(2018, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'dricciardo', 'nhulkenberg')
CheckOne(2019, 'lhamilton', 'vbottas')
CheckOne(2016, 'lhamilton', 'nrosberg')
CheckOne(2015, 'lhamilton', 'nrosberg')
CheckOne(2014, 'lhamilton', 'nrosberg')
CheckOne(2013, 'lhamilton', 'nrosberg')
CheckOne(2012, 'lhamilton', 'jbutton')
CheckOne(2011, 'lhamilton', 'jbutton')
CheckOne(2011, 'sperez', 'kkobayashi')
CheckOne(2012, 'sperez', 'kkobayashi')
source('f1-startup.r')
SetUpModel()
dum = f1smoothing::GetSmooth('qr','q','bw',TRUE,30)
dum$smoothDF %>% filter(race == '2019abudhabi') %>% arrange(smoothDCoef)
dum$smoothDF %>% filter(race == '2019brazil') %>% arrange(smoothDCoef)
#rddf %>% filter(year == 2019 & driver=='kmagnussen')) %>% select(race, startin)
names(rddf)
rddf %>% filter(year == 2019 & driver=='kmagnussen')) %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='kmagnussen') %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='sperez') %>% select(race, startingGrid)
rddf %>% filter(year == 2019 & driver=='agiovinazzi') %>% select(race, startingGrid)
qdf[1,]
nrow(qdf)
nrow(rddf)
dim(qsdf)
dim(qualifyingSessionDF)
source('f1-startup.r')
SetUpModel()
lbl = f1laptimelm::CalculateFuelTyreEffect(lbl, 30)
lbl = lazy_left_join(lbl, rddf, c('race', 'driver'), 'team')
CheckTwo = function(myYear, myDriv1, myDriv2, myTeam) {
# same as above but make presentation more attractive
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue & team == myTeam)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb', 'tyreLap')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb, tyreLap)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
numComparison = 5
compName = c('all laps', 'exclude car problem', 'exclude traffic', 'exclude dead rubber', 'adjust for model')
deltaVec = rep(NA, numComparison)
numObVec = rep(NA, numComparison)
for (i in 1:numComparison) {
if (i == 1) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2))
}
if (i == 2) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2)
}
if (i == 3) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2)
}
if (i %in% c(4, 5)) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99)
}
dum = validHorizLbl %>%
summarise(delta = mean(sec1 - sec2),
numLap = n())
deltaVec[i] = dum %>% pull(delta)
numObVec[i] = dum %>% pull(numLap)
if (i == 5) {
validHorizLbl = validHorizLbl %>%
mutate(adjSec1 = sec1 - fuelTyreEffect1,
adjSec2 = sec2 - fuelTyreEffect2)
deltaVec[i] = with(validHorizLbl, mean( (adjSec1 - adjSec2)))
meanTyreLap1 = mean(validHorizLbl$tyreLap1)
meanTyreLap2 = mean(validHorizLbl$tyreLap2)
}
}
toReturn = MakeListForFunctionOutput(deltaVec, numObVec, meanTyreLap1, meanTyreLap2)
return(toReturn)
}
CoerceComparisonToList = function(currentPairingList) {
secNumObVec = paste0(round(currentPairingList$deltaVec, 3), ' (', currentPairingList$numObVec, ')')
niceVec = c(secNumObVec,
round(currentPairingList$meanTyreLap1, 2),
round(currentPairingList$meanTyreLap2, 2))
return(niceVec)
}
ViewComparisonByYear = function(myYear) {
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = rddf %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
# now ditch non driving drivers
tmPairing = tmPairing %>%
filter(numLap1 > 0 & numLap2 > 0) %>%
select(-c(numLap1, numLap2))
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
return(tmPairing)
}
ViewComparisonByYear(2018)
devtools::install('f1admin')
devtools::document('f1data')
devtools::install('f1data')
devtools::document('f1plot')
devtools::install('f1plot')
source('f1-startup.r')
lbl = f1laptimelm::CalculateFuelTyreEffect(lbl, 30)
SetUpModel()
lbl = f1laptimelm::CalculateFuelTyreEffect(lbl, 30)
lbl = lazy_left_join(lbl, rddf, c('race', 'driver'), 'team')
CheckTwo = function(myYear, myDriv1, myDriv2, myTeam) {
# same as above but make presentation more attractive
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue & team == myTeam)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb', 'tyreLap')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb, tyreLap)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
numComparison = 5
compName = c('all laps', 'exclude car problem', 'exclude traffic', 'exclude dead rubber', 'adjust for model')
deltaVec = rep(NA, numComparison)
numObVec = rep(NA, numComparison)
for (i in 1:numComparison) {
if (i == 1) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2))
}
if (i == 2) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2)
}
if (i == 3) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2)
}
if (i %in% c(4, 5)) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99)
}
dum = validHorizLbl %>%
summarise(delta = mean(sec1 - sec2),
numLap = n())
deltaVec[i] = dum %>% pull(delta)
numObVec[i] = dum %>% pull(numLap)
if (i == 5) {
validHorizLbl = validHorizLbl %>%
mutate(adjSec1 = sec1 - fuelTyreEffect1,
adjSec2 = sec2 - fuelTyreEffect2)
deltaVec[i] = with(validHorizLbl, mean( (adjSec1 - adjSec2)))
meanTyreLap1 = mean(validHorizLbl$tyreLap1)
meanTyreLap2 = mean(validHorizLbl$tyreLap2)
}
}
toReturn = MakeListForFunctionOutput(deltaVec, numObVec, meanTyreLap1, meanTyreLap2)
return(toReturn)
}
CoerceComparisonToList = function(currentPairingList) {
secNumObVec = paste0(round(currentPairingList$deltaVec, 3), ' (', currentPairingList$numObVec, ')')
niceVec = c(secNumObVec,
round(currentPairingList$meanTyreLap1, 2),
round(currentPairingList$meanTyreLap2, 2))
return(niceVec)
}
ViewComparisonByYear = function(myYear) {
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = rddf %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
# now ditch non driving drivers
tmPairing = tmPairing %>%
filter(numLap1 > 0 & numLap2 > 0) %>%
select(-c(numLap1, numLap2))
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
return(tmPairing)
}
ViewComparisonByYear(2018)
source('c:/research/general_funct.r')
install.packages('formattable')
myDF = tibble(x = 1:5, y = 1:5, z = c('yo','how are you today','myself i am\njust fantastic','and','you'))
myDF
formattable::format_table(myDF)
formattable::formattable(myDF)
myDF
myDF$z[3]
myDF$z[3] = "myself i am\\njust fantastic"
formattable::formattable(myDF)
myDF$z[3] = "myself i am\\\njust fantastic"
formattable::formattable(myDF)
myDF$z[3] = "myself i am\njust fantastic"
formattable::formattable(myDF)
