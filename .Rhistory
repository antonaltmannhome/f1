filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue & team == myTeam)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb', 'tyreLap')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb, tyreLap)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
numComparison = 5
compName = c('all laps', 'exclude car problem', 'exclude traffic', 'exclude dead rubber', 'adjust for model')
deltaVec = rep(NA, numComparison)
numObVec = rep(NA, numComparison)
for (i in 1:numComparison) {
if (i == 1) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2))
}
if (i == 2) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2)
}
if (i == 3) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2)
}
if (i %in% c(4, 5)) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99)
}
dum = validHorizLbl %>%
summarise(delta = mean(sec1 - sec2),
numLap = n())
deltaVec[i] = dum %>% pull(delta)
numObVec[i] = dum %>% pull(numLap)
if (i == 5) {
validHorizLbl = validHorizLbl %>%
mutate(adjSec1 = sec1 - fuelTyreEffect1,
adjSec2 = sec2 - fuelTyreEffect2)
deltaVec[i] = with(validHorizLbl, mean( (adjSec1 - adjSec2)))
meanTyreLap1 = mean(validHorizLbl$tyreLap1)
meanTyreLap2 = mean(validHorizLbl$tyreLap2)
}
}
toReturn = MakeListForFunctionOutput(deltaVec, numObVec, meanTyreLap1, meanTyreLap2)
return(toReturn)
}
tmPairing = f1data:::GetAllDriverTeamPairingByYear(2019)
myList = vector('list', nrow(tmPairing))
devtools::document('f1data')
devtools::install('f1data')
devtools::document('f1plot')
devtools::install('f1plot')
myYear = 2019
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
tmPairing[1,]
myYear = 2019
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
myList = vector('list', nrow(tmPairing))
for (ti in 1:nrow(tmPairing)) {
myList[[ti]] = with(tmPairing[ti,],
CheckTwo(myYear, driver1, driver2, team)
}
}
myList = vector('list', nrow(tmPairing))
for (ti in 1:nrow(tmPairing)) {
myList[[ti]] = with(tmPairing[ti,],
CheckTwo(myYear, driver1, driver2, team))
}
myList[[1]]
CoerceComparisonToList = function(currentPairingList) {
niceVec = paste0(round(myList$deltaVec, 3), '(', myList$numObVec, ')')
return(niceVec)
}
CoerceComparisonToList(myList[[1]])
myList[[1]]
myList[[1]]$deltaVec
CoerceComparisonToList = function(currentPairingList) {
niceVec = paste0(round(currentPairingList$deltaVec, 3), '(', currentPairingList$numObVec, ')')
return(niceVec)
}
CoerceComparisonToList(myList[[1]])
CoerceComparisonToList = function(currentPairingList) {
secNumObVec = paste0(round(currentPairingList$deltaVec, 3), ' (', currentPairingList$numObVec, ')')
niceVec = c(secNumObVec, currentPairingList$meanTyreLap1, currentPairingList$meanTyreLap2)
return(niceVec)
}
myYear = 2019
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
myList = vector('list', nrow(tmPairing))
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
myList[[ti]] = CoerceComparisonToList(rawOutput)
}
bind_rows(myList)
myList[[1]]
myYear = 2019
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
tmPairing
CoerceComparisonToList = function(currentPairingList) {
secNumObVec = paste0(round(currentPairingList$deltaVec, 3), ' (', currentPairingList$numObVec, ')')
niceVec = c(secNumObVec,
round(currentPairingList$meanTyreLap1, 2),
round(currentPairingList$meanTyreLap2, 2))
return(niceVec)
}
myYear = 2019
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
tmPairing
tmPairing
ViewComparisonByYear = function(myYear) {
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
}
ViewComparisonByYear(2019)
ViewComparisonByYear = function(myYear) {
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
return(tmPairing)
}
ViewComparisonByYear(2018)
ViewComparisonByYear(2017)
ViewComparisonByYear(2016)
ViewComparisonByYear(2015)
ViewComparisonByYear(2014)
ViewComparisonByYear(2013)
ViewComparisonByYear(2012)
myYear = 2013
myYear = 2014
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
ti
tmPairing[ti,]
myDriv1 = 'alotterer'
myDriv2 = 'mericsson'
myTeam = 'caterham'
myYear
# same as above but make presentation more attractive
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue & team == myTeam)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb', 'tyreLap')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb, tyreLap)
dim(horizLbl)
sum(!is.na(horizLbl$sec1) & !is.na(horizLbl$sec2))
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
sum(!is.na(horizLbl$sec1) & !is.na(horizLbl$sec2))
horizLbl[1,]
badName
goodName
# same as above but make presentation more attractive
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue & team == myTeam)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb', 'tyreLap')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb, tyreLap)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
names(horizLbl)
length(unique(myLbl$driver))
# worth checking that both drivers actually did some laps, massive pain if not
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n())
sumLapByDriverTeam
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = lbl %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, list = c(numLap = 0))
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
sumLapByDriverTeam
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = lbl %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap)) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap))
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = lbl %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
tmPairing
myYear = 2015
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = lbl %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
# now ditch non driving drivers
tmPairing = tmPairing %>%
filter(numLap1 > 0 & numLap2 > 0)
tmPairing
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = lbl %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
tmPairing
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = rddf %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
tmPairing
ViewComparisonByYear = function(myYear) {
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = rddf %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
# now ditch non driving drivers
tmPairing = tmPairing %>%
filter(numLap1 > 0 & numLap2 > 0)
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
return(tmPairing)
}
ViewComparisonByYear(2015)
ViewComparisonByYear(2014)
ViewComparisonByYear = function(myYear) {
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = rddf %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
# now ditch non driving drivers
tmPairing = tmPairing %>%
filter(numLap1 > 0 & numLap2 > 0) %>%
select(-c(numLap1, numLap2))
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
return(tmPairing)
}
ViewComparisonByYear(2014)
ViewComparisonByYear(2012)
ViewComparisonByYear(2011)
source('f1-startup.r')
SetUpModel()
lbl = f1laptimelm::CalculateFuelTyreEffect(lbl, 30)
lbl = lazy_left_join(lbl, rddf, c('race', 'driver'), 'team')
CheckTwo = function(myYear, myDriv1, myDriv2, myTeam) {
# same as above but make presentation more attractive
myLbl = lbl %>%
filter(driver %in% c(myDriv1, myDriv2) & year == myYear & !isRogue & team == myTeam)
colToSpread = c('sec', 'inTraffic', 'isCarProblem', 'fuelTyreEffect', 'modalFinPosProb', 'tyreLap')
horizLbl = myLbl %>%
select(race, lap, driver, colToSpread) %>%
spread_multiple(keyCol = driver, sec, inTraffic, isCarProblem, fuelTyreEffect, modalFinPosProb, tyreLap)
## horrible names of course, so rename
badName = paste0('driver', apply(expand.grid(c(myDriv1, myDriv2), colToSpread), 1, paste, collapse = '_'))
goodName = apply(expand.grid(c(1, 2), colToSpread), 1, function(x) paste(rev(x), collapse = ''))
for (j in 1:length(badName)) {
names(horizLbl)[names(horizLbl) == badName[j]] = goodName[j]
}
# so, comparison 1, compare all laps, raw sec
numComparison = 5
compName = c('all laps', 'exclude car problem', 'exclude traffic', 'exclude dead rubber', 'adjust for model')
deltaVec = rep(NA, numComparison)
numObVec = rep(NA, numComparison)
for (i in 1:numComparison) {
if (i == 1) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2))
}
if (i == 2) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2)
}
if (i == 3) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2)
}
if (i %in% c(4, 5)) {
validHorizLbl = horizLbl %>%
filter(!is.na(sec1) & !is.na(sec2) &
!isCarProblem1 & !isCarProblem2 &
!inTraffic1 & !inTraffic2 &
modalFinPosProb1 < 0.99 & modalFinPosProb2 < 0.99)
}
dum = validHorizLbl %>%
summarise(delta = mean(sec1 - sec2),
numLap = n())
deltaVec[i] = dum %>% pull(delta)
numObVec[i] = dum %>% pull(numLap)
if (i == 5) {
validHorizLbl = validHorizLbl %>%
mutate(adjSec1 = sec1 - fuelTyreEffect1,
adjSec2 = sec2 - fuelTyreEffect2)
deltaVec[i] = with(validHorizLbl, mean( (adjSec1 - adjSec2)))
meanTyreLap1 = mean(validHorizLbl$tyreLap1)
meanTyreLap2 = mean(validHorizLbl$tyreLap2)
}
}
toReturn = MakeListForFunctionOutput(deltaVec, numObVec, meanTyreLap1, meanTyreLap2)
return(toReturn)
}
CoerceComparisonToList = function(currentPairingList) {
secNumObVec = paste0(round(currentPairingList$deltaVec, 3), ' (', currentPairingList$numObVec, ')')
niceVec = c(secNumObVec,
round(currentPairingList$meanTyreLap1, 2),
round(currentPairingList$meanTyreLap2, 2))
return(niceVec)
}
ViewComparisonByYear = function(myYear) {
tmPairing = f1data:::GetAllDriverTeamPairingByYear(myYear)
# worth checking that both drivers actually did some laps, massive pain if not
allTeamDriver = rddf %>%
filter(year == myYear) %>%
distinct(team, driver)
sumLapByDriverTeam = lbl %>%
filter(year == myYear & isGood30) %>%
group_by(team, driver) %>%
summarise(numLap = n()) %>%
ungroup() %>%
complete(allTeamDriver, fill = list(numLap = 0))
tmPairing = tmPairing %>%
left_join(sumLapByDriverTeam %>%
rename(driver1 = driver,
numLap1 = numLap),
c('team', 'driver1')) %>%
left_join(sumLapByDriverTeam %>%
rename(driver2 = driver,
numLap2 = numLap),
c('team', 'driver2'))
# now ditch non driving drivers
tmPairing = tmPairing %>%
filter(numLap1 > 0 & numLap2 > 0) %>%
select(-c(numLap1, numLap2))
compCol = c('all', 'minusCarProb', 'minusTraffic', 'minusDeadRubber', 'fuelAdj', 'meanTyreLap1', 'meanTyreLap2')
tmPairing[,compCol] = NA
for (ti in 1:nrow(tmPairing)) {
rawOutput = with(tmPairing[ti,], CheckTwo(myYear, driver1, driver2, team))
tmPairing[ti, compCol] = CoerceComparisonToList(rawOutput)
}
return(tmPairing)
}
ViewComparisonByYear(2018)
ViewComparisonByYear(2013)
ViewComparisonByYear(2014)
