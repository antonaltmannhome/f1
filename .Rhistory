library(shiny)
runExample('shinydemo')
runExample('02_text')
setwd("C:/research")
runExample('02_text')
runExample('shinydemo')
runApp
runApp('shinydemo')
q()
source('c:/research/f1/f1-startup.r')
newVersionIsLive = TRUE
source(paste0(UPDATECODEPATH, 'fetch-data.r'))
source(paste0(UPDATECODEPATH, 'augment-raw-data.r'))
source(paste0(UPDATECODEPATH, 'transfer-data-to-database.r'))
myYear = 2019
FetchSeasonInfo(myYear)
AugmentRawData(myYear)
TransferDataToDatabase(myYear)
source('c:/research/f1/f1-startup.r')
f1qualifying::RunQualifyingOutlier()
f1qualifying::RunQualifyingModel()
# also, do we need driverteam in the function, how about use driverTeamYr which has already been made
# worth checking the optimisation is ok, it looked a bit flat when run on very small sample of data
SmoothAndStretch('qual')
f1outlier::GetOutlier0()
modelchoice = 4
f1validity::UpdateValidity(modelchoice)
f1laptimelm::ProcessLapTimeModel(modelchoice)
CheckSensibleModel(4)
f1laptimelm::GetLapTimeLMIntercept(modelchoice)
### all checks are agreeing to desired level up to here...
SmoothAndStretch(modelchoice)
f1gaptrafficpitstop::ProcessInlapOutlapDelta()
f1gaptrafficpitstop::GetPostDeltaOvertaking()
f1carproblem::ProcessCarProblem()
modelchoice = 30
f1validity::UpdateValidity(modelchoice)
f1laptimelm::ProcessLapTimeModel(modelchoice)
f1laptimelm::GetLapTimeLMIntercept(modelchoice)
SmoothAndStretch(modelchoice)
f1messystint:::ProcessInterruptedStint()
f1messystint:::ProcessGuessedPitStop()
f1messystint:::ProcessAlternativeStrategy()
f1messystint:::ProcessIntendedStopLap()
f1blockedovertakingmodel:::ProcessPossibleOvertaking()
f1blockedovertakingmodel:::ProcessBlockedOvertakingModel()
f1simulation:::ProcessInRunningWeightModel()
f1simulation:::ProcessSimulation()
f1admin::UpdateDatabase()
f1plot:::RacePaceAndNumObPlot('2019brazil')
f1plot:::DriverRacePlot('2019brazil','dricciardo','nhulkenberg')
f1plot:::DriverRacePlot('2019brazil','dkvyat','nhulkenberg')
source('f1-startup.r')
SetUpModel()
f1plot:::RacePaceAndNumObPlot('2019brazil')
